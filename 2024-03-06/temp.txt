    // REORGANIZAR - VERSÃO QUE REORDENA O ARQUIVO, USANDO INTERCALAÇÃO BALANCEADA
    // Recebe um objeto vazio para auxiliar na reorganização
    public void reorganizar() throws Exception {
    
        int tamanhoBlocoMemoria = 3;
    
        // Lê o cabeçalho
        arquivo.seek(0);
        int cabecalho = arquivo.readInt();
        
        // ---------------------------------------------------------------------
        // Primeira etapa (distribuição)
        // ---------------------------------------------------------------------
        List<T> registrosOrdenados = new ArrayList<>();

        int    contador=0, seletor=0;
        int    tamanho,codigo;
        byte   lapide;
        byte[] dados;
        T r1 = classe.newInstance(),
          r2 = classe.newInstance(),
          r3 = classe.newInstance();
        T rAnt1, rAnt2, rAnt3;
        
        // Abre três arquivos temporários para escrita (1º conjunto)
        DataOutputStream out1 = new DataOutputStream( new FileOutputStream("temp1.db") );
        DataOutputStream out2 = new DataOutputStream( new FileOutputStream("temp2.db") );
        DataOutputStream out3 = new DataOutputStream( new FileOutputStream("temp3.db") );
        DataOutputStream out = null;
        
        try{ 
            contador = 0;
            seletor = 0;
            while(true) {
                
                // Lê o registro no arquivo de dados
                lapide = arquivo.readByte();
                tamanho = arquivo.readInt();
                dados = new byte[tamanho];
                arquivo.read(dados);
                r1.setByteArray(dados);

                // Adiciona o registro ao vetor
                if(lapide == ' ') {
                    registrosOrdenados.add((T)r1.clone());
                    contador++;
                }
                if(contador==tamanhoBlocoMemoria){
                    
                    switch(seletor) {
                        case 0:  out = out1; break;
                        case 1:  out = out2; break;
                        default: out = out3; 
                    }
                    seletor = (seletor+1)%3;
                    
                    Collections.sort(registrosOrdenados);
                    for( T r: registrosOrdenados ) {
                        dados = r.getByteArray();
                        out.writeInt(dados.length);
                        out.write(dados);
                    }
                    registrosOrdenados.clear();
                    
                    contador = 0;
                }
                
            }
            
        } catch(EOFException eof) {
            // Descarrega os últimos registros lidos
            if(contador>0){
                switch(seletor) {
                    case 0:  out = out1; break;
                    case 1:  out = out2; break;
                    default: out = out3; 
                }
                Collections.sort(registrosOrdenados);
                for( T r: registrosOrdenados ) {
                    dados = r.getByteArray();
                    out.writeInt(dados.length);
                    out.write(dados);
                }
            }
        }
        out1.close();
        out2.close();
        out3.close();

        // ---------------------------------------------------------------------
        // Segunda etapa (intercalação)
        // ---------------------------------------------------------------------
        DataInputStream in1, in2, in3;
        boolean sentido = true; // true: conj1 -> conj2  |  false: conj2 -> conj1
        boolean maisIntercalacoes = true;
        boolean compara1, compara2, compara3;
        boolean terminou1, terminou2, terminou3;

        while(maisIntercalacoes) {
            
            maisIntercalacoes = false;
            compara1 = false; compara2 = false; compara3 = false;
            terminou1 = false; terminou2 = false; terminou3 = false;
            
            // Seleciona as fontes e os destinos
            if(sentido) {
                in1  = new DataInputStream( new FileInputStream( "temp1.db"));
                in2  = new DataInputStream( new FileInputStream( "temp2.db"));
                in3  = new DataInputStream( new FileInputStream( "temp3.db"));
                out1 = new DataOutputStream(new FileOutputStream("temp4.db"));
                out2 = new DataOutputStream(new FileOutputStream("temp5.db"));
                out3 = new DataOutputStream(new FileOutputStream("temp6.db"));
            } else {
                in1  = new DataInputStream( new FileInputStream( "temp4.db"));
                in2  = new DataInputStream( new FileInputStream( "temp5.db"));
                in3  = new DataInputStream( new FileInputStream( "temp6.db"));
                out1 = new DataOutputStream(new FileOutputStream("temp1.db"));
                out2 = new DataOutputStream(new FileOutputStream("temp2.db"));
                out3 = new DataOutputStream(new FileOutputStream("temp3.db"));
            }
            sentido = !sentido;
            seletor = 0;
            
            
            // novos registros anteriores vazios
            r1 = classe.newInstance();
            r2 = classe.newInstance();
            r3 = classe.newInstance();

            // Inicia a intercalação dos segmentos
            boolean mudou1 = true, mudou2 = true, mudou3 = true;
            while(!terminou1 || !terminou2 || !terminou3) {
                
                if(!compara1 && !compara2 && !compara3) {
                    // Seleciona o próximo arquivo de saída
                    switch(seletor) {
                        case 0:  out = out1; break;
                        case 1:  out = out2; break;
                        default: out = out3; 
                    }
                    seletor = (seletor+1)%3;
                    
                    if(!terminou1) compara1 = true; 
                    if(!terminou2) compara2 = true; 
                    if(!terminou3) compara3 = true;
                }

                // le o próximo registro da última fonte usada
                if(mudou1) {
                    rAnt1 = (T)r1.clone();
                    try {
                        tamanho = in1.readInt();
                        dados = new byte[tamanho];
                        in1.read(dados);
                        r1.setByteArray(dados);
                        if(r1.compareTo(rAnt1)<0)
                            compara1 = false;   
                    }
                    catch( EOFException e) {
                        compara1 = false;
                        terminou1 = true;
                    }
                    mudou1 = false;
                }
                if(mudou2) {
                    rAnt2 = (T)r2.clone();
                    try {
                        tamanho = in2.readInt();
                        dados = new byte[tamanho];
                        in2.read(dados);
                        r2.setByteArray(dados);
                        if(r2.compareTo(rAnt2)<0)
                            compara2 = false;                    
                    }
                    catch( EOFException e) {
                        compara2 = false;
                        terminou2 = true;
                    }
                    mudou2 = false;
                }
                if(mudou3) {
                    rAnt3 = (T)r3.clone();
                    try {
                        tamanho = in3.readInt();
                        dados = new byte[tamanho];
                        in3.read(dados);
                        r3.setByteArray(dados);
                        if(r3.compareTo(rAnt3)<0)
                            compara3 = false;                    
                    }
                    catch( EOFException e) {
                        compara3 = false;
                        terminou3 = true;
                    }
                    mudou3 = false;
                }
                
                // Escreve o menor registro
                if(compara1 && (!compara2||r1.compareTo(r2)<=0) && (!compara3||r1.compareTo(r3)<=0)) {
                    dados = r1.getByteArray();
                    out.writeInt(dados.length);
                    out.write(dados);
                    mudou1 = true;
                }
                else if(compara2 && (!compara1||r2.compareTo(r1)<=0) && (!compara3||r2.compareTo(r3)<=0)) {
                    dados = r2.getByteArray();
                    out.writeInt(dados.length);
                    out.write(dados);
                    mudou2 = true;
                }
                else if(compara3 && (!compara1||r3.compareTo(r1)<=0) && (!compara2||r3.compareTo(r2)<=0)) {
                    dados = r3.getByteArray();
                    out.writeInt(dados.length);
                    out.write(dados);
                    mudou3 = true;
                }

                // Testa se há mais intercalações a fazer
                if(seletor>1)
                    maisIntercalacoes = true;
            }

            in1.close(); in2.close(); in3.close();
            out1.close(); out2.close(); out3.close();
        }
            
        
        //return;
        
        // copia os registros de volta para o arquivo original
        arquivo.close();
        if(sentido)
            in1  = new DataInputStream( new FileInputStream( "temp1.db"));
        else
            in1  = new DataInputStream( new FileInputStream( "temp4.db"));
        DataOutputStream ordenado = new DataOutputStream( new FileOutputStream(nomeArquivo) );
        ordenado.writeInt(cabecalho);
        
        try {
            while(true) {
                tamanho = in1.readInt();
                dados = new byte[tamanho];
                in1.read(dados);
                r1.setByteArray(dados);

                ordenado.writeByte(' ');   // lápide
                ordenado.writeInt(tamanho);
                ordenado.write(dados);
            }
        } catch(EOFException e ) {
            // saída normal
        }
        ordenado.close();
        in1.close();
        (new File("temp1.db")).delete();
        (new File("temp2.db")).delete();
        (new File("temp3.db")).delete();
        (new File("temp4.db")).delete();
        (new File("temp5.db")).delete();
        (new File("temp6.db")).delete();
        arquivo = new RandomAccessFile(nomeArquivo,"rw");
    }